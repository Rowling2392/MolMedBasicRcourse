\documentclass[12pt]{article}

\usepackage{amsmath}
\usepackage{hyperref}
\usepackage[authoryear,round]{natbib}
\usepackage{graphicx}
\usepackage{enumerate}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}

\textwidth=6.2in
\textheight=8.5in
%\parskip=.3cm
\oddsidemargin=.1in
\evensidemargin=.1in
\headheight=-.3in

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}
\author{Karl Brand\footnote{brandk@gmail.com}\hspace{2mm}  and Elizabeth Ribble\footnote{emcclel3@msudenver.edu}}
\date{17-21 December 2018}

\begin{document}

\title{Basic Course on {\tt R}:\\
Entering and Importing Data Practical Answers}
\maketitle
\tableofcontents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% end preamble %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage\section{Entering and Importing Data}
 
\subsection{Use R to do the following exercises.} 

\begin{enumerate}[{1.1}.1]
  \item Enter the following into a data structure with the name {\tt color}: 
    \begin{itemize}
      \item purple
      \item yellow
      \item red
      \item brown
      \item green
      \item purple
      \item red
      \item purple
    \end{itemize}
{\color{red} 
<<>>=
color <- c("purple", "yellow", "red", "brown", "green", 
           "purple", "red", "purple")
@
}
  \item Display the 2nd element of {\tt color}. 
{\color{red} 
<<>>=
color[2]
@
}
  \item Enter the following into a data structure with the name {\tt weight}:
    \begin{itemize}
      \item 23
      \item 21
      \item 18
      \item 26
      \item 25
      \item 22
      \item 26
      \item 19
    \end{itemize}
{\color{red} 
<<>>=
weight <- c(23, 21, 18, 26, 25, 22, 26, 19)
@
}

  \item What are the lengths of {\tt color} and {\tt weight}? Use a function to answer this.  
{\color{red} 
<<>>=
length(color)
length(weight)
@
}
  \item Join {\tt color} and {\tt weight} together using {\tt cbind()} and assign it to the object {\tt micecbind}. 
{\color{red} 
<<>>=
micecbind <- cbind(color = color, weight = weight)
@
}
  \item What is the data structure of {\tt micecbind}? What are the dimensions?  Are the weights still numbers ({\tt num}) or were they converted to characters ({\tt chr})?
{\color{red} 
<<>>=
micecbind
str(micecbind)
dim(micecbind)
@
Using {\tt str} we see that {\tt micecbind} is a matrix with dimensions 8 x 2 and the weights were converted to characters, which we don't want! The function {\tt dim} can also be used to extract only the dimensions. 
}


  \item Now join {\tt color} and {\tt weight} together using {\tt data.frame()} with argument {\tt stringsAsFactors = FALSE} and assign it to the object {\tt micedf}.

{\color{red} 
<<>>=
micedf <- data.frame(color = color, weight = weight, stringsAsFactors = FALSE)
@
}
  \item What is the data structure of {\tt micedf}? What are the dimensions? Are the weights still numbers ({\tt num}) or were they converted to characters ({\tt chr})?
  
  {\color{red} 
<<>>=
micedf
str(micedf)
dim(micedf)
@
Using {\tt str} we see that {\tt micedf} is a data frame with dimensions 8 x 2, with variable {\tt color} a character vector and {\tt weight} a numeric vector. The function {\tt dim} can also be used to extract only the dimensions. Thankfully the weights were not converted to characters!
}
\newpage

  \item Display only the 3rd row of {\tt micedf}.
{\color{red}
<<>>=
micedf[3, ]
@
}
  \item Display only the 2nd column (``weight'') of {\tt micedf}. Do so in two different ways.
  
{\color{red}
\noindent Any two of the following are satisfactory:
<<eval=FALSE>>=
micedf[, 2] 
micedf[, -1] 
micedf[, "weight"] 
micedf[[2]] 
micedf$weight 
micedf["weight"] 
@
}
\item Display the dimensions of {\tt micedf}. 
{\color{red}
<<>>=
dim(micedf)
@
}
  \item Assign the following strings to the row names of {\tt micedf}: 
    \begin{itemize}
      \item mouse1
      \item mouse2
      \item mouse3
      \item mouse4
      \item mouse5
      \item mouse6
      \item mouse7
      \item mouse8
    \end{itemize}
    Hint: try using {\tt paste}.
{\color{red}
<<>>=
row.names(micedf) <- paste("mouse", 1:8, sep = "")
@
}
  \item Create a list containing three elements and assign it to {\tt
    mylist}:
    \begin{itemize}
      \item {\tt micedf}
      \item A data frame of {\tt micedf} with a new column called {\tt
        double} that is 2 times the second column of {\tt micedf}
        ({\tt weight}).  (Did you get an error? Make sure that the
        second column is numeric and if it isn't, change it!)
      \item The names of {\tt micedf}.
    \end{itemize}
{\color{red}
<<>>=
mylist <- list(micedf, 
               data.frame(micedf, double = 2 * micedf$weight), 
               names(micedf))
@
}
  \item Assign these names to {\tt mylist}: {\tt first}, {\tt second},
    {\tt third}.  
    {\color{red}
<<>>=
names(mylist) <- c("first", "second", "third")
@
}

  \item Display {\tt mylist}. What does it look like? 
{\color{red}
<<>>=
mylist
@
\noindent A list with three items with the given names preceded by
          {\tt \$}. The first two entries are data frames and have row
          names, but the third does not (it is a character vector).  }

\item Display only the second element of {\tt mylist}. Do so
  in two different ways.

{\color{red}
\noindent Any two of the following are satisfactory:
<<eval=FALSE>>=
mylist[[2]] ## extract
mylist$second ## extract
mylist[2] ## subset
mylist[-c(1, 3)] ## subset
mylist["second"] ## subset
@
}
  \item Write {\tt micedf} to a file called
    ``micedf1.csv'' in the course directory.
{\color{red}
<<>>=
write.csv(micedf, "micedf1.csv")
@
}
  \item Open ``micedf1.csv'' in Excel and describe what you
    see. Repeat the step above but do not include row names and call
    the file ``micedf2.csv''. How is the output different from
    ``micedf1.csv''?
  
{\color{red}
\noindent The file ``micedf1.csv'' looks exactly like the data frame
when displayed in R.
<<eval=TRUE,echo=TRUE>>=
write.csv(micedf, "micedf2.csv", row.names = FALSE)
@
The file ``micedf2.csv'' looks just like the data frame above, but
it is missing the row names.  }

  \item Now read in ``micedf1.csv'' and ``micedf2.csv'' into R in two
    new objects ({\tt newmice1} and {\tt newmice2},
    respectively). Describe any differences between the two
    objects. What are the dimensions of each object?  {\color{red}

<<>>=
newmice1 <- read.csv("micedf1.csv")
newmice2 <- read.csv("micedf2.csv")
str(newmice1)
str(newmice2)
newmice1
newmice2
@ 
The first file was written with row names, but when we read it into
R, the row names are now just a column in the data frame. Because
there was an empty cell in the space where a column name should have
been, R names it {\tt X}. The second file had no row names, and, just
like the first file, is given the default row names of 1 to the number
of rows. The dimensions are 8 x 3 and 8 x 2, respectively (seen in the
output of the {\tt str} call).  }

  \item Read in ``micedf1.csv'' into R (assign to object {\tt
    newmice3}). Use the argument {\tt row.names} to indicate that the
    first column should be row names and do not allow strings to be
    turned into factors. Display the object and the structure of the
    object and describe how it is different from {\tt newmice1} and
    {\tt micedf}. What are the dimensions of {\tt newmice3}?
    {\color{red}
<<eval=TRUE,echo=FALSE>>=
newmice3 <- read.csv("micedf1.csv", 
                     row.names = 1, stringsAsFactors = F)
@
<<eval=FALSE,echo=TRUE>>=
newmice3 <- read.csv(paste(mydir, "micedf1.csv", sep="/"), 
                     row.names = 1, stringsAsFactors = F)
@
<<>>=
str(newmice3)
newmice3
@ 
The new object {\tt newmice3} now has row names where in {\tt
  newmice1} they were treated as a variable in the data frame. The
{\tt color} variable was not converted to a factor, unlike in {\tt
  newmice1}. The new object {\tt micedf} is now (nearly) identical to
the original {\tt micedf}. It has the same row names and dimensions as
{\tt micedf}. The only difference is the class of {\tt weight} is an
integer instead of just ``numeric'' (more specific). The dimensions
are 8 x 2.  }

\end{enumerate}


\subsection{Use R to do the following exercises on the {\tt Puromycin} data.}  


\begin{enumerate}[{1.2}.1]
  \item Load the {\tt Puromycin} data using the {\tt data()} function.
{\color{red}
<<>>=
data(Puromycin)
@
}
  \item What is the data structure of {\tt Puromycin}? What are the dimensions? Do not just display the data (this is not convenient for large datasets).
{\color{red}
<<>>=
str(Puromycin)
@
Using {\tt str} we see that {\tt Puromycin} is a data frame with dimensions 23 x 3, with variables {\tt conc} and {\tt rate} numeric vectors and {\tt state} a factor with 2 levels.
}
  \item What are the names of {\tt Puromycin}? Use a function other than {\tt str}.
{\color{red}
<<>>=
names(Puromycin)
@
}
  \item What are the levels of the {\tt state} variable? Use a function other than {\tt str}.
{\color{red}
<<>>=
levels(Puromycin$state) 
@
}
  \item Display the rate for all concentrations less than 0.10 in the treated group.
{\color{red}
<<>>=
Puromycin[Puromycin$conc < .10 & Puromycin$state == "treated", "rate"]
## or 
Puromycin$rate[Puromycin$conc < .10 & Puromycin$state == "treated"]
## or 
Puromycin[["rate"]][Puromycin$conc < .10 & Puromycin$state == "treated"]
@
}
  \item What are the row indices for the concentrations of 0.22? 
{\color{red}
<<>>=
which(Puromycin$conc == 0.22)
@
}
\end{enumerate}

\begin{center} 
\textbf{If you want to save your work: save your R session and/or source code!}
\end{center}





\end{document}



